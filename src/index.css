@tailwind base;
@tailwind components;
@tailwind utilities;

/* CUBE methodology */
/* CUBE CSS with Tailwind CSS */
/* Short reason: we wanna make browser to do the work for us */
/* Link: https://cube-css-with-tailwind.netlify.app/ */
/* Link: https://andy-bell.co.uk/i-used-tailwind-for-the-u-in-cube-css-and-i-liked-it/ */
:root {
    --custom-color: rgb(57, 112, 151);
    /* the color issue i will put it later */
}

body {
    /* Typography */
    font-size: 1rem;
    font-weight: normal;
    font-family: 'Roboto', 'ui-sans-serif', 'system-ui', 'sans-serif',
        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
        'Noto Color Emoji';

    /* Colors */
    background-color: var(--custom-color);

    /* Others */
    -webkit-tap-highlight-color: transparent;
}

/* Composition */
/* Stack */
.stack {
    /* ↓ The grid context */
    display: grid;
    row-gap: var(--gap, 1.5rem);
}

.stack > * {
    /* ↓ Any extant vertical margins are removed */
    margin-block: 0;
}

/* Box */
.box {
    /* ↓ Padding set to the first point on the modular scale */
    padding-block: var(--padding-block);
    padding-inline: var(--padding-inline);
    /* ↓ Assumes you have a --border-thin var */
    border: var(--border-thin) solid;
    /* ↓ Always apply the transparent outline, for high contrast mode */
    outline: var(--border-thin) transparent;
    outline-offset: calc(var(--border-thin) * -1);

    color: var(--color, black);
    background-color: var(--bg-color, transparent);
}

/* Center */
.center {
    /* ↓ Remove padding from the width calculation */
    box-sizing: content-box;
    /* ↓ The maximum width is the maximum measure */
    max-inline-size: var(--max, 60ch);
    /* ↓ Only affect horizontal margins */
    margin-inline: auto;
    /* ↓ Apply the minimum horizontal space */
    padding-inline: var(--s1);
}

.flex-row {
    display: flex;
    gap: var(--gap);
    flex-direction: row;
    justify-content: center;
    align-items: center;
}

/* Utility */
.to-right {
    margin-left: auto;
}

.to-left {
    margin-right: auto;
}

/* Block */
/* Button
Note: Remember to add hover and focus state to the component
button - the base one, use flex row and gap to give them the space
button exceptions
button[data-type="primary"] - just white
button[data-type="secondary"] - got transparent background, and white text
button[data-type="naked"] - got no background
button[data-type="large"] - got big padding
button[data-reverse="true"] - row reverse the content
*/
.button {
    /* Layout */
    display: flex;
    gap: var(--gap, 0.25rem);

    /* Spacing */
    padding-block: var(--py, 0.125rem);
    padding-inline: var(--px, 0.75rem);

    /* Typography */
    font-size: var(--fs);
    text-align: center;
    text-transform: capitalize;

    /* Colors */
    color: var(--color);
    background-color: var(--bg);

    /* Others */
    border-radius: 0.375rem;
}

.button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.button[data-type='primary'] {
    --color: var(--custom-color);
    --bg: white;
    box-shadow: 0 0.375rem var(--box-shadow, rgb(235, 235, 235));
}

.button[data-type='secondary'] {
    --color: white;
    --bg: rgba(255, 255, 255, 0.2);
}

.button[data-type='naked'] {
    --bg: transparent;
}

.button[data-type='naked']:hover,
.button[data-type='naked']:focus {
    opacity: 0.8;
}

.button[data-type='naked'].active {
    --bg: rgb(0 0 0 / 0.15);
    font-weight: bold;
    opacity: 1;
}

.button[data-type='confirm'] {
    --color: white;
    --bg: rgb(0 0 0 / 0.75);
    --fs: 0.875rem;
}

.button[data-type='confirm']:hover,
.button[data-type='confirm']:focus {
    --bg: rgb(0 0 0 / 1);
}

.button[data-type='confirm']:disabled {
    --bg: rgb(0 0 0 / 0.75);
}

.button[data-size='small'] {
    --px: 0.75rem;
    --py: 0.5rem;

    --fs: 0.8125rem;
}

.button[data-size='medium'] {
    --px: 1.5rem;
    --py: 0.5rem;
    text-transform: uppercase;
}

.button[data-size='large'] {
    /* Spacing */
    --px: 3.5rem;
    --py: 0.75rem;

    /* Typography */
    --fs: 1.375rem;
    text-transform: uppercase;
}

.button[data-size='large'].active {
}

/* Input
normal input

checkbox
input[data-type="checkbox"]
input[data-type="toggle-btn"]

select

input exception */

input[type='number'] {
    /* Spacing */
    width: 100%;
    padding: 0.625rem;
    /* Colors */
    background-color: rgb(203 213 225);
    /* Others */
    border-radius: 0.5rem;
}

.dialog {
    --bg-color: white;
    max-width: 30rem;
    width: 100%;
    border-radius: 0.5rem;
    scrollbar-width: none; /* Firefox */
}

/* Hide scrollbar for Chrome, Safari and Opera */
.dialog::-webkit-scrollbar {
    display: none;
}

.dialog::backdrop {
    background-color: rgb(0 0 0 / 0.5);
}

.dialog__header,
.dialog__footer {
    --gray: rgb(238, 238, 238);
    --padding-block: 1rem;
    --padding-inline: 1.25rem;
}

.dialog__header {
    color: rgb(170, 170, 170);
    border-bottom: 1px solid var(--gray);
}

.dialog__footer {
    background-color: var(--gray);
}

.dialog__content {
    --padding-inline: 1.25rem;
}

.dialog__content > * {
    padding-bottom: 2.1875rem;
}

.dialog__content > *:where(:not(:last-child)) {
    border-bottom: 1px solid;
}
